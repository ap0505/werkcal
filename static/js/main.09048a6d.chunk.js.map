{"version":3,"sources":["DayCell.jsx","DayDetails.jsx","CustomCalendar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["DayCell","props","shiftName","localStorage","getItem","dateKey","bgKey","getBgKey","isShaded","state","this","setState","date","onClick","className","React","Component","DayDetails","displayedList","fullList","event","target","value","which","length","list","push","setItem","JSON","stringify","prevState","filter","name","toLowerCase","startsWith","e","node","contains","onClose","stopPropagation","newList","onClickName","onClear","toggleShaded","handleClickOutside","ref","autoFocus","type","onKeyUp","handleKeyDown","bind","map","shift","key","removeShift","item","parse","CustomCalendar","showDetails","selectedDateKey","moment","month","year","removeItem","Select","dateCellContentRender","getDateKey","showDayDetails","setShiftName","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.09048a6d.chunk.js","sourcesContent":["import React from 'react';\n// import DayDetails from './DayDetails.jsx';\n\nclass DayCell extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tconst shiftName = localStorage.getItem(props.dateKey);\n\n\t\tconst bgKey = this.getBgKey(props.dateKey);\n\t\tconst isShaded = localStorage.getItem(bgKey);\n\n\t\tthis.state = {\n\t\t\tshiftName: shiftName || \"\",\n\t\t\tisShaded: !!isShaded\n\t\t};\n\t}\n\n\tcomponentDidUpdate() {\n\t\tconst shiftName = localStorage.getItem(this.props.dateKey);\n\n\t\tif (this.state.shiftName !== shiftName) {\n\t\t\tthis.setState({ shiftName });\n\t\t}\n\n\t\tconst bgKey = this.getBgKey(this.props.dateKey);\n\t\tconst isShaded = localStorage.getItem(bgKey);\n\t\tif (this.state.isShaded !== isShaded) {\n\t\t\tthis.setState({ isShaded });\n\t\t}\n\t}\n\n\tgetBgKey(dateKey) {\n\t\treturn `${this.props.dateKey}-bg`;\n\t}\n\n\trender() {\n\t\tconst { date, dateKey, onClick } = this.props;\n\t\tconst { shiftName, isShaded } = this.state;\n\n\t\treturn (\n\t\t\t<div className={`day-cell ${isShaded ? 'shaded': ''}`} onClick={() => onClick(dateKey)}>\n        <div className=\"date\">\n          <div className=\"date-number\"> { date } </div>\n        \t<div className=\"shift-name\"> { shiftName } </div>\n        </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default DayCell;\n","import React from 'react';\n\nclass DayDetails extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tdisplayedList: this.fullList\n\t\t};\n\t}\n\n\tget fullList() {\n\t\tconst item = localStorage.getItem(\"shifts-list\");\n\t\treturn item ? JSON.parse(item) : [];\n\t}\n\n\thandleKeyDown(event) {\n\t\tconst shiftName = event.target.value;\n\t\t// if user hits 'Return', make new shift\n\t\tif (event.which === 13 && shiftName.length > 0) {\n\t\t\tconst list = this.fullList;\n\t\t\tlist.push(shiftName);\n\t\t\tlocalStorage.setItem(\"shifts-list\", JSON.stringify(list));\n\t\t\tevent.target.value = \"\";\n\t\t\tthis.setState({ displayedList: list });\n\t\t} else {\n\t\t\tthis.setState(prevState => {\n\t\t\t\tconst displayedList = this.fullList.filter(name =>\n\t\t\t\t\tname.toLowerCase().startsWith(shiftName.toLowerCase()));\n\t\t\t\treturn { displayedList };\n\t\t\t});\n\t\t}\n\t}\n\n\thandleClickOutside(e) {\n\t\tif (!this.node.contains(e.target)) {\n\t\t\tthis.props.onClose(e);\n\t\t}\n\t}\n\n\tremoveShift(e, shiftName) {\n\t\te.stopPropagation();\n\t\tconst newList = this.fullList.filter(name => name !== shiftName);\n\t\tlocalStorage.setItem(\"shifts-list\", JSON.stringify(newList));\n\t\tthis.setState({ displayedList: newList });\n\t}\n\n\trender() {\n\t\tconst { displayedList } = this.state;\n\t\tconst { onClickName, onClose, onClear, toggleShaded } = this.props;\n\n\t\treturn (\n\t    <div className=\"day-details-wrapper\" onClick={(e) => this.handleClickOutside(e)}>\n\t     \t<div ref={node => this.node = node} className=\"day-details\">\n\t\t    \t<div className=\"options-row\">\n\t\t    \t\t<div onClick={(e) => onClose(e)}>&#10060;</div>\n\t\t    \t\t<button onClick={(e) => toggleShaded(e)}>Yoga Day</button>\n\t\t    \t\t<button onClick={(e) => onClear(e)}>Clear</button>\n\t\t    \t</div>\n\t\t    \t<input autoFocus type=\"text\" onKeyUp={this.handleKeyDown.bind(this)}/>\n\t\t    \t<ul className=\"shift-list\">\n\t\t    \t\t{ displayedList.map(shift => (\n\t\t    \t\t\t<li key={shift} onClick={(e) => onClickName(e, shift)}>\n\t\t    \t\t\t\t<span>{shift}</span>\n\t\t    \t\t\t\t<span className=\"remove\" onClick={e => this.removeShift(e, shift)}>&#10060;</span>\n\t    \t\t\t\t</li>\n\t    \t\t\t)) }\n\t\t    \t</ul>\n\t\t  \t</div>\n\t    </div>\n\t  );\n\t}\n}\n\n\nexport default DayDetails;\n","import React from 'react';\nimport FullCalendar from 'rc-calendar/lib/FullCalendar';\nimport 'rc-calendar/assets/index.css';\nimport Select from 'rc-select';\nimport 'rc-select/assets/index.less';\nimport DayCell from './DayCell.jsx';\nimport DayDetails from './DayDetails.jsx';\n\nclass CustomCalendar extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tshowDetails: false,\n\t\t\tselectedDateKey: null\n\t\t};\n\t}\n\n\tgetDateKey(moment) {\n\t\treturn moment.month()+ \"-\" + moment.date() + \"-\" + moment.year();\n\t}\n\n\tsetShiftName(e, name, dateKey) {\n  \te.stopPropagation();\n\n  \tlocalStorage.setItem(dateKey, name);\n  \tthis.setState({ showDetails: false });\n  }\n\n\tshowDayDetails(dateKey) {\n\t\tthis.setState({\n\t\t\tshowDetails: true,\n\t\t\tselectedDateKey: dateKey\n\t\t});\n\t}\n\n\tonClose(e) {\n  \te.stopPropagation();\n\t\tthis.setState({ showDetails: false, selectedDateKey: null });\n\t}\n\n\tonClear(e) {\n  \te.stopPropagation();\n\t\tthis.setState(prevState => {\n\t\t\tconst { selectedDateKey } = prevState;\n\t  \tlocalStorage.removeItem(selectedDateKey);\n\t\t\treturn { selectedDateKey: null, showDetails: false };\n\t\t});\n\t}\n\n\ttoggleShaded(e, dateKey) {\n  \te.stopPropagation();\n\n  \tconst bgKey = `${dateKey}-bg`;\n  \tconst curr = localStorage.getItem(bgKey);\n  \tif (curr)\n\t  \tlocalStorage.removeItem(bgKey);\n\t  else\n\t  \tlocalStorage.setItem(bgKey, true);\n\n\t}\n\n\trender() {\n\t\tconst { showDetails, selectedDateKey } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"custom-calendar\">\n\t      <FullCalendar\n\t      \tSelect={Select}\n\t      \tdateCellContentRender={(moment) =>\n\t          <DayCell\n\t          \tdate={moment.date()}\n\t          \tdateKey={this.getDateKey(moment)}\n\t          \tonClick={dateKey => this.showDayDetails(dateKey)}\n          \t/>\n\t        }\n\t    \t/>\n\t    \t{ showDetails && (\n\t\t\t\t\t<DayDetails\n\t\t\t\t\t\tonClickName={(e, name) => this.setShiftName(e, name, selectedDateKey)}\n\t\t\t\t\t\tonClose={(e) => this.onClose(e)}\n\t\t\t\t\t\tonClear={(e) => this.onClear(e)}\n\t\t\t\t\t\ttoggleShaded={e => this.toggleShaded(e, selectedDateKey)}\n\t\t\t\t\t/>\n\t\t\t\t) }\n    \t</div>\n  \t);\n\t}\n}\n\nexport default CustomCalendar;\n","import React from 'react';\nimport './App.css';\nimport CustomCalendar from './CustomCalendar';\n\nfunction App() {\n  return (\n    <CustomCalendar />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
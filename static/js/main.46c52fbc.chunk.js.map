{"version":3,"sources":["DayCell.jsx","DayDetails.jsx","CustomCalendar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["DayCell","props","shiftName","localStorage","getItem","dateKey","state","this","setState","date","onClick","className","React","Component","DayDetails","displayedList","fullList","event","target","value","which","length","list","push","setItem","JSON","stringify","prevState","filter","name","toLowerCase","startsWith","e","node","contains","onClose","stopPropagation","newList","onClickName","onClear","handleClickOutside","ref","autoFocus","type","onKeyUp","handleKeyDown","bind","map","shift","key","removeShift","item","parse","CustomCalendar","showDetails","selectedDateKey","moment","month","year","removeItem","Select","dateCellContentRender","getDateKey","showDayDetails","setShiftName","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.46c52fbc.chunk.js","sourcesContent":["import React from 'react';\n// import DayDetails from './DayDetails.jsx';\n\nclass DayCell extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tconst shiftName = localStorage.getItem(props.dateKey);\n\n\t\tthis.state = {\n\t\t\tshiftName: shiftName || \"\"\n\t\t};\n\t}\n\n\tcomponentDidUpdate() {\n\t\tconst shiftName = localStorage.getItem(this.props.dateKey);\n\t\tif (this.state.shiftName !== shiftName) {\n\t\t\tthis.setState({ shiftName });\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { date, dateKey, onClick } = this.props;\n\t\tconst { shiftName } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"day-cell\" onClick={() => onClick(dateKey)}>\n        <div className=\"date\">\n          <div className=\"date-number\"> { date } </div>\n        \t<div className=\"shift-name\"> { shiftName } </div>\n        </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default DayCell;\n","import React from 'react';\n\nclass DayDetails extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tdisplayedList: this.fullList\n\t\t};\n\t}\n\n\tget fullList() {\n\t\tconst item = localStorage.getItem(\"shifts-list\");\n\t\treturn item ? JSON.parse(item) : [];\n\t}\n\n\thandleKeyDown(event) {\n\t\tconst shiftName = event.target.value;\n\t\t// if user hits 'Return', make new shift\n\t\tif (event.which === 13 && shiftName.length > 0) {\n\t\t\tconst list = this.fullList;\n\t\t\tlist.push(shiftName);\n\t\t\tlocalStorage.setItem(\"shifts-list\", JSON.stringify(list));\n\t\t\tevent.target.value = \"\";\n\t\t\tthis.setState({ displayedList: list });\n\t\t} else {\n\t\t\tthis.setState(prevState => {\n\t\t\t\tconst displayedList = this.fullList.filter(name =>\n\t\t\t\t\tname.toLowerCase().startsWith(shiftName.toLowerCase()));\n\t\t\t\treturn { displayedList };\n\t\t\t});\n\t\t}\n\t}\n\n\thandleClickOutside(e) {\n\t\tif (!this.node.contains(e.target)) {\n\t\t\tthis.props.onClose(e);\n\t\t}\n\t}\n\n\tremoveShift(e, shiftName) {\n\t\te.stopPropagation();\n\t\tconst newList = this.fullList.filter(name => name !== shiftName);\n\t\tlocalStorage.setItem(\"shifts-list\", JSON.stringify(newList));\n\t\tthis.setState({ displayedList: newList });\n\t}\n\n\trender() {\n\t\tconst { displayedList } = this.state;\n\t\tconst { onClickName, onClose, onClear } = this.props;\n\n\t\treturn (\n\t    <div className=\"day-details-wrapper\" onClick={(e) => this.handleClickOutside(e)}>\n\t     \t<div ref={node => this.node = node} className=\"day-details\">\n\t\t    \t<div className=\"options-row\">\n\t\t    \t\t<div onClick={(e) => onClose(e)}>&#10060;</div>\n\t\t    \t\t<button onClick={(e) => onClear(e)}>Clear</button>\n\t\t    \t</div>\n\t\t    \t<input autoFocus type=\"text\" onKeyUp={this.handleKeyDown.bind(this)}/>\n\t\t    \t<ul className=\"shift-list\">\n\t\t    \t\t{ displayedList.map(shift => (\n\t\t    \t\t\t<li key={shift} onClick={(e) => onClickName(e, shift)}>\n\t\t    \t\t\t\t<span>{shift}</span>\n\t\t    \t\t\t\t<span className=\"remove\" onClick={e => this.removeShift(e, shift)}>&#10060;</span>\n\t    \t\t\t\t</li>\n\t    \t\t\t)) }\n\t\t    \t</ul>\n\t\t  \t</div>\n\t    </div>\n\t  );\n\t}\n}\n\n\nexport default DayDetails;\n","import React from 'react';\nimport FullCalendar from 'rc-calendar/lib/FullCalendar';\nimport 'rc-calendar/assets/index.css';\nimport Select from 'rc-select';\nimport 'rc-select/assets/index.less';\nimport DayCell from './DayCell.jsx';\nimport DayDetails from './DayDetails.jsx';\n\nclass CustomCalendar extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tshowDetails: false,\n\t\t\tselectedDateKey: null\n\t\t};\n\t}\n\n\tgetDateKey(moment) {\n\t\treturn moment.month()+ \"-\" + moment.date() + \"-\" + moment.year();\n\t}\n\n\tsetShiftName(e, name, dateKey) {\n  \te.stopPropagation();\n\n  \tlocalStorage.setItem(dateKey, name);\n  \tthis.setState({ showDetails: false });\n  }\n\n\tshowDayDetails(dateKey) {\n\t\tthis.setState({\n\t\t\tshowDetails: true,\n\t\t\tselectedDateKey: dateKey\n\t\t});\n\t}\n\n\tonClose(e) {\n  \te.stopPropagation();\n\t\tthis.setState({ showDetails: false, selectedDateKey: null });\n\t}\n\n\tonClear(e) {\n  \te.stopPropagation();\n\t\tthis.setState(prevState => {\n\t\t\tconst { selectedDateKey } = prevState;\n\t  \tlocalStorage.removeItem(selectedDateKey);\n\t\t\treturn { selectedDateKey: null, showDetails: false };\n\t\t});\n\t}\n\n\trender() {\n\t\tconst { showDetails, selectedDateKey } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"custom-calendar\">\n\t      <FullCalendar\n\t      \tSelect={Select}\n\t      \tdateCellContentRender={(moment) =>\n\t          <DayCell date={moment.date()} dateKey={this.getDateKey(moment)}\n\t          \tonClick={dateKey => this.showDayDetails(dateKey)} />\n\t        }\n\t    \t/>\n\t    \t{ showDetails && (\n\t\t\t\t\t<DayDetails\n\t\t\t\t\t\tonClickName={(e, name) => this.setShiftName(e, name, selectedDateKey)}\n\t\t\t\t\t\tonClose={(e) => this.onClose(e)}\n\t\t\t\t\t\tonClear={(e) => this.onClear(e)}\n\t\t\t\t\t/>\n\t\t\t\t) }\n    \t</div>\n  \t);\n\t}\n}\n\nexport default CustomCalendar;\n","import React from 'react';\nimport './App.css';\nimport CustomCalendar from './CustomCalendar';\n\nfunction App() {\n  return (\n    <CustomCalendar />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}